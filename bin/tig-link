#!/bin/bash
#
# tig-login [-n] [-a] [-t] username|organization
# Authorize with tig and cloud providers

set -e
OPTIND=1

install=false
configure=false
update=false
reinstall=false
delete=false
start=false
stop=false
restart=false

usage_short="${CYAN}Usage: tig-link [-I] [-C] [-U] [-R] [-D] [-s] [-z] [-R]"
usage_long="$usage_short\n-I: Installs tig-link server."
usage_long="$usage_long\n-C: Configures tig-link server (overwrites)."
usage_long="$usage_long\n-U: Updates tig-link server."
usage_long="$usage_long\n-R: Reinstalls tig-link server."
usage_long="$usage_long\n-D: Deletes tig-link server."
usage_long="$usage_long\n-s: starts tig-link server."
usage_long="$usage_long\n-z: stops tig-link server."
usage_long="$usage_long\n-r: restarts tig-link server."

usage_short="$usage_short\nUse -h to get supported command information."

options=":IURDsrzh"
while getopts "$options" opt ; do
    case "$opt" in
    I )
      install=true
      ;;
    C )
      configure=true
      ;;
    U )
      update=true
      ;;
    R )
      reinstall=true
      ;;
    D )
      delete=true
      ;;
    s )
      start=true
      ;;
    z )
      stop=true
      ;;
    r )
      restart=true
      ;;
    h )
      >&2 echo -e "$usage_long" && exit 1
      exit 0
      ;;
    \?)
      >&2 echo -e "Unknown option: -$OPTARG"
      >&2 echo -e "$usage_short"
      exit 1
      ;;
    : )
      >&2 echo -e "Missing option argument for -$OPTARG"
      >&2 echo -e "$usage_short"
      exit 1
      ;;
    * )
      >&2 echo -e "Unimplemented option: -$OPTARG" && exit 1
      >&2 echo -e "$usage_short"
      exit 1
    esac
    shift $((OPTIND-1))
done


app_root="$LOCAL_ROOT/tig-link"
app_lib_root="$app_root/lib"
app_config_path="$app_root/.tig.json"
app_config_default_path="$app_lib_root/tig.json"

if [ "$install" = true ] ; then
  if ! hash mkdirp 2>/dev/null ; then
    >&2 echo "--Installing mkdirp...--"
    if hash sudo 2>/dev/null ; then
      sudo npm install -g mkdirp
    else
      npm install -g mkdirp
    fi
  fi

  if ! hash forever 2>/dev/null ; then
    >&2 echo "--Installing forever...--"
    if hash sudo 2>/dev/null ; then
      sudo npm install -g forever
    else
      npm install -g forever
    fi
  fi

  if [ ! -d "$app_root" ] ; then
    >&2 echo "--Cloning tig-link...--"
    mkdirp "$LOCAL_ROOT"
    pushd "$LOCAL_ROOT" >/dev/null
      git clone https://github.com/cchamberlain/tig-link
    popd >/dev/null
  fi

  pushd "$app_root" >/dev/null
    >&2 echo "--Updating tig-link...--"
    git pull origin master
    >&2 echo "--Installing npm production dependencies...--"
    npm install --production
  popd >/dev/null
fi


if [ "$configure" = true ] || [ ! -f "$app_config_path" ] || [[ ! -s "$app_config_path" ]] ; then
    >&2 echo "--Configuring tig-link...--"
    >&2 echo -n "JWT Secret:"
    read jwt_secret
    >&2 echo -n "GitHub Client Id:"
    read github_client_id
    >&2 echo -n "GitHub Client Secret:"
    read github_client_secret
    >&2 echo -n "Mongo User:"
    read mongo_user
    >&2 echo -n "Mongo Password:"
    read mongo_password
    >&2 echo -n "Mongo Url:"
    read mongo_url

    >&2 echo "--Initializing $app_config_path--"
    cat "$app_config_default_path" | sed -e "s/<jwt_secret>/$jwt_secret/" -e "s/<github_client_id>/$github_client_id/" -e "s/<github_client_secret>/$github_client_secret/" -e "s/<mongo_user>/$mongo_user/" -e "s/<mongo_password>/$mongo_password/" -e "s/<mongo_url>/$mongo_url/" >"$app_config_path"
fi


if [ "$start" = true ] ; then
  pushd "$app_root" >/dev/null
    node server
  popd >/dev/null
fi
